#!/usr/bin/env python

# batchkiller.py

import os
import sys
import time
import config

def submit_kill_request(job_base_name, job_id):
    if not os.path.exists(config.KILL_REQUEST_FOLDER):
        os.makedirs(config.KILL_REQUEST_FOLDER)

    timestamp = int(time.time() * 1000)
    filename = f"kill_{timestamp}_{job_base_name}_{job_id}.txt"
    filepath = os.path.join(config.KILL_REQUEST_FOLDER, filename)

    with open(filepath, 'w') as f:
        f.write(f"{job_base_name} {job_id}\n")

    print(f"[Killer] Submitted kill request for: {job_base_name} {job_id}")

def submit_kill_all_request():
    if not os.path.exists(config.KILL_REQUEST_FOLDER):
        os.makedirs(config.KILL_REQUEST_FOLDER)

    timestamp = int(time.time() * 1000)
    filename = f"killall_{timestamp}.txt"
    filepath = os.path.join(config.KILL_REQUEST_FOLDER, filename)

    with open(filepath, 'w') as f:
        f.write("KILLALL\n")

    print("[Killer] Submitted KILLALL request (kill all jobs)")

def main():
    if len(sys.argv) == 2 and sys.argv[1] == "0":
        submit_kill_all_request()
        return

    if len(sys.argv) != 4:
        print("Usage:")
        print("  python3 batchkiller.py <job_base_name> <from_id> <to_id>")
        print("  python3 batchkiller.py 0     (kill all)")
        sys.exit(1)

    job_base_name = sys.argv[1]
    try:
        from_id = int(sys.argv[2])
        to_id = int(sys.argv[3])
    except ValueError:
        print("Error: from_id and to_id must be integers.")
        sys.exit(1)

    if from_id > to_id:
        print("Error: from_id must be <= to_id")
        sys.exit(1)

    for job_id in range(from_id, to_id + 1):
        submit_kill_request(job_base_name, job_id)

if __name__ == "__main__":
    main()
